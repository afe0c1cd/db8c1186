// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CreateTodoRequestStatus.
const (
	CreateTodoRequestStatusClosed CreateTodoRequestStatus = "closed"
	CreateTodoRequestStatusOpen   CreateTodoRequestStatus = "open"
)

// Defines values for CreateTodoRequestVisibility.
const (
	CreateTodoRequestVisibilityInternal CreateTodoRequestVisibility = "internal"
	CreateTodoRequestVisibilityPrivate  CreateTodoRequestVisibility = "private"
)

// Defines values for TodoStatus.
const (
	TodoStatusClosed TodoStatus = "closed"
	TodoStatusOpen   TodoStatus = "open"
)

// Defines values for TodoVisibility.
const (
	TodoVisibilityInternal TodoVisibility = "internal"
	TodoVisibilityPrivate  TodoVisibility = "private"
)

// Defines values for UpdateTodoRequestStatus.
const (
	Closed UpdateTodoRequestStatus = "closed"
	Open   UpdateTodoRequestStatus = "open"
)

// Defines values for UpdateTodoRequestVisibility.
const (
	UpdateTodoRequestVisibilityInternal UpdateTodoRequestVisibility = "internal"
	UpdateTodoRequestVisibilityPrivate  UpdateTodoRequestVisibility = "private"
)

// Defines values for GetV1TodosParamsVisibility.
const (
	GetV1TodosParamsVisibilityAll      GetV1TodosParamsVisibility = "all"
	GetV1TodosParamsVisibilityInternal GetV1TodosParamsVisibility = "internal"
	GetV1TodosParamsVisibilityPrivate  GetV1TodosParamsVisibility = "private"
)

// CreateTodoRequest defines model for CreateTodoRequest.
type CreateTodoRequest struct {
	// AssigneeUserIds List of user IDs assigned to the todo item
	AssigneeUserIds *[]openapi_types.UUID `json:"assignee_user_ids,omitempty"`

	// Description Description of the
	Description *string    `json:"description,omitempty"`
	DueDate     *time.Time `json:"due_date,omitempty"`

	// Status Status of the todo item
	Status *CreateTodoRequestStatus `json:"status,omitempty"`

	// Title Title of the todo item
	Title string `json:"title"`

	// Visibility Visibility of the todo item
	Visibility CreateTodoRequestVisibility `json:"visibility"`
}

// CreateTodoRequestStatus Status of the todo item
type CreateTodoRequestStatus string

// CreateTodoRequestVisibility Visibility of the todo item
type CreateTodoRequestVisibility string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Todo defines model for Todo.
type Todo struct {
	AssigneeUserIds *[]openapi_types.UUID `json:"assignee_user_ids,omitempty"`
	CreatedAt       time.Time             `json:"created_at"`
	Description     *string               `json:"description,omitempty"`
	DueDate         *time.Time            `json:"due_date,omitempty"`
	Id              openapi_types.UUID    `json:"id"`
	Status          *TodoStatus           `json:"status,omitempty"`
	Title           string                `json:"title"`
	UpdatedAt       time.Time             `json:"updated_at"`
	Visibility      TodoVisibility        `json:"visibility"`
}

// TodoStatus defines model for Todo.Status.
type TodoStatus string

// TodoVisibility defines model for Todo.Visibility.
type TodoVisibility string

// UpdateTodoRequest defines model for UpdateTodoRequest.
type UpdateTodoRequest struct {
	// Description Description of the todo item
	Description *string    `json:"description,omitempty"`
	DueDate     *time.Time `json:"due_date,omitempty"`

	// Status Status of the todo item
	Status *UpdateTodoRequestStatus `json:"status,omitempty"`

	// Title Title of the todo item
	Title *string `json:"title,omitempty"`

	// Visibility Visibility of the todo item
	Visibility *UpdateTodoRequestVisibility `json:"visibility,omitempty"`
}

// UpdateTodoRequestStatus Status of the todo item
type UpdateTodoRequestStatus string

// UpdateTodoRequestVisibility Visibility of the todo item
type UpdateTodoRequestVisibility string

// GetV1TodosParams defines parameters for GetV1Todos.
type GetV1TodosParams struct {
	// Visibility Filter todos by visibility, default is all
	Visibility *GetV1TodosParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
}

// GetV1TodosParamsVisibility defines parameters for GetV1Todos.
type GetV1TodosParamsVisibility string

// PostV1TodosJSONRequestBody defines body for PostV1Todos for application/json ContentType.
type PostV1TodosJSONRequestBody = CreateTodoRequest

// PatchV1TodosTodoIdJSONRequestBody defines body for PatchV1TodosTodoId for application/json ContentType.
type PatchV1TodosTodoIdJSONRequestBody = UpdateTodoRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get todos with optional visibility filter
	// (GET /v1/todos)
	GetV1Todos(ctx echo.Context, params GetV1TodosParams) error
	// Create a new organization todo
	// (POST /v1/todos)
	PostV1Todos(ctx echo.Context) error
	// Delete a todo by ID
	// (DELETE /v1/todos/{todoId})
	DeleteV1TodosTodoId(ctx echo.Context, todoId openapi_types.UUID) error
	// Update an existing todo
	// (PATCH /v1/todos/{todoId})
	PatchV1TodosTodoId(ctx echo.Context, todoId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1Todos converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Todos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TodosParams
	// ------------- Optional query parameter "visibility" -------------

	err = runtime.BindQueryParameter("form", true, false, "visibility", ctx.QueryParams(), &params.Visibility)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter visibility: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1Todos(ctx, params)
	return err
}

// PostV1Todos converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Todos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1Todos(ctx)
	return err
}

// DeleteV1TodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1TodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteV1TodosTodoId(ctx, todoId)
	return err
}

// PatchV1TodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchV1TodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchV1TodosTodoId(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/todos", wrapper.GetV1Todos)
	router.POST(baseURL+"/v1/todos", wrapper.PostV1Todos)
	router.DELETE(baseURL+"/v1/todos/:todoId", wrapper.DeleteV1TodosTodoId)
	router.PATCH(baseURL+"/v1/todos/:todoId", wrapper.PatchV1TodosTodoId)

}
